// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend-shorturl/internal/data/ent/predicate"
	"backend-shorturl/internal/data/ent/shorturl"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeShorturl = "Shorturl"
)

// ShorturlMutation represents an operation that mutates the Shorturl nodes in the graph.
type ShorturlMutation struct {
	config
	op              Op
	typ             string
	id              *int64
	create_time     *time.Time
	update_time     *time.Time
	short_code      *string
	long_url        *string
	created_at      *time.Time
	expire_at       *time.Time
	is_deleted      *bool
	access_count    *int
	addaccess_count *int
	creator_ip      *string
	creator_id      *string
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*Shorturl, error)
	predicates      []predicate.Shorturl
}

var _ ent.Mutation = (*ShorturlMutation)(nil)

// shorturlOption allows management of the mutation configuration using functional options.
type shorturlOption func(*ShorturlMutation)

// newShorturlMutation creates new mutation for the Shorturl entity.
func newShorturlMutation(c config, op Op, opts ...shorturlOption) *ShorturlMutation {
	m := &ShorturlMutation{
		config:        c,
		op:            op,
		typ:           TypeShorturl,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withShorturlID sets the ID field of the mutation.
func withShorturlID(id int64) shorturlOption {
	return func(m *ShorturlMutation) {
		var (
			err   error
			once  sync.Once
			value *Shorturl
		)
		m.oldValue = func(ctx context.Context) (*Shorturl, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Shorturl.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withShorturl sets the old Shorturl of the mutation.
func withShorturl(node *Shorturl) shorturlOption {
	return func(m *ShorturlMutation) {
		m.oldValue = func(context.Context) (*Shorturl, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ShorturlMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ShorturlMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Shorturl entities.
func (m *ShorturlMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ShorturlMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ShorturlMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Shorturl.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *ShorturlMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ShorturlMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Shorturl entity.
// If the Shorturl object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShorturlMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ShorturlMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *ShorturlMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ShorturlMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Shorturl entity.
// If the Shorturl object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShorturlMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ShorturlMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetShortCode sets the "short_code" field.
func (m *ShorturlMutation) SetShortCode(s string) {
	m.short_code = &s
}

// ShortCode returns the value of the "short_code" field in the mutation.
func (m *ShorturlMutation) ShortCode() (r string, exists bool) {
	v := m.short_code
	if v == nil {
		return
	}
	return *v, true
}

// OldShortCode returns the old "short_code" field's value of the Shorturl entity.
// If the Shorturl object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShorturlMutation) OldShortCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShortCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShortCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShortCode: %w", err)
	}
	return oldValue.ShortCode, nil
}

// ResetShortCode resets all changes to the "short_code" field.
func (m *ShorturlMutation) ResetShortCode() {
	m.short_code = nil
}

// SetLongURL sets the "long_url" field.
func (m *ShorturlMutation) SetLongURL(s string) {
	m.long_url = &s
}

// LongURL returns the value of the "long_url" field in the mutation.
func (m *ShorturlMutation) LongURL() (r string, exists bool) {
	v := m.long_url
	if v == nil {
		return
	}
	return *v, true
}

// OldLongURL returns the old "long_url" field's value of the Shorturl entity.
// If the Shorturl object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShorturlMutation) OldLongURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLongURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLongURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLongURL: %w", err)
	}
	return oldValue.LongURL, nil
}

// ResetLongURL resets all changes to the "long_url" field.
func (m *ShorturlMutation) ResetLongURL() {
	m.long_url = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ShorturlMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ShorturlMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Shorturl entity.
// If the Shorturl object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShorturlMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ShorturlMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetExpireAt sets the "expire_at" field.
func (m *ShorturlMutation) SetExpireAt(t time.Time) {
	m.expire_at = &t
}

// ExpireAt returns the value of the "expire_at" field in the mutation.
func (m *ShorturlMutation) ExpireAt() (r time.Time, exists bool) {
	v := m.expire_at
	if v == nil {
		return
	}
	return *v, true
}

// OldExpireAt returns the old "expire_at" field's value of the Shorturl entity.
// If the Shorturl object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShorturlMutation) OldExpireAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpireAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpireAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpireAt: %w", err)
	}
	return oldValue.ExpireAt, nil
}

// ClearExpireAt clears the value of the "expire_at" field.
func (m *ShorturlMutation) ClearExpireAt() {
	m.expire_at = nil
	m.clearedFields[shorturl.FieldExpireAt] = struct{}{}
}

// ExpireAtCleared returns if the "expire_at" field was cleared in this mutation.
func (m *ShorturlMutation) ExpireAtCleared() bool {
	_, ok := m.clearedFields[shorturl.FieldExpireAt]
	return ok
}

// ResetExpireAt resets all changes to the "expire_at" field.
func (m *ShorturlMutation) ResetExpireAt() {
	m.expire_at = nil
	delete(m.clearedFields, shorturl.FieldExpireAt)
}

// SetIsDeleted sets the "is_deleted" field.
func (m *ShorturlMutation) SetIsDeleted(b bool) {
	m.is_deleted = &b
}

// IsDeleted returns the value of the "is_deleted" field in the mutation.
func (m *ShorturlMutation) IsDeleted() (r bool, exists bool) {
	v := m.is_deleted
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDeleted returns the old "is_deleted" field's value of the Shorturl entity.
// If the Shorturl object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShorturlMutation) OldIsDeleted(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDeleted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDeleted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDeleted: %w", err)
	}
	return oldValue.IsDeleted, nil
}

// ResetIsDeleted resets all changes to the "is_deleted" field.
func (m *ShorturlMutation) ResetIsDeleted() {
	m.is_deleted = nil
}

// SetAccessCount sets the "access_count" field.
func (m *ShorturlMutation) SetAccessCount(i int) {
	m.access_count = &i
	m.addaccess_count = nil
}

// AccessCount returns the value of the "access_count" field in the mutation.
func (m *ShorturlMutation) AccessCount() (r int, exists bool) {
	v := m.access_count
	if v == nil {
		return
	}
	return *v, true
}

// OldAccessCount returns the old "access_count" field's value of the Shorturl entity.
// If the Shorturl object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShorturlMutation) OldAccessCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccessCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccessCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccessCount: %w", err)
	}
	return oldValue.AccessCount, nil
}

// AddAccessCount adds i to the "access_count" field.
func (m *ShorturlMutation) AddAccessCount(i int) {
	if m.addaccess_count != nil {
		*m.addaccess_count += i
	} else {
		m.addaccess_count = &i
	}
}

// AddedAccessCount returns the value that was added to the "access_count" field in this mutation.
func (m *ShorturlMutation) AddedAccessCount() (r int, exists bool) {
	v := m.addaccess_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetAccessCount resets all changes to the "access_count" field.
func (m *ShorturlMutation) ResetAccessCount() {
	m.access_count = nil
	m.addaccess_count = nil
}

// SetCreatorIP sets the "creator_ip" field.
func (m *ShorturlMutation) SetCreatorIP(s string) {
	m.creator_ip = &s
}

// CreatorIP returns the value of the "creator_ip" field in the mutation.
func (m *ShorturlMutation) CreatorIP() (r string, exists bool) {
	v := m.creator_ip
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatorIP returns the old "creator_ip" field's value of the Shorturl entity.
// If the Shorturl object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShorturlMutation) OldCreatorIP(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatorIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatorIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatorIP: %w", err)
	}
	return oldValue.CreatorIP, nil
}

// ClearCreatorIP clears the value of the "creator_ip" field.
func (m *ShorturlMutation) ClearCreatorIP() {
	m.creator_ip = nil
	m.clearedFields[shorturl.FieldCreatorIP] = struct{}{}
}

// CreatorIPCleared returns if the "creator_ip" field was cleared in this mutation.
func (m *ShorturlMutation) CreatorIPCleared() bool {
	_, ok := m.clearedFields[shorturl.FieldCreatorIP]
	return ok
}

// ResetCreatorIP resets all changes to the "creator_ip" field.
func (m *ShorturlMutation) ResetCreatorIP() {
	m.creator_ip = nil
	delete(m.clearedFields, shorturl.FieldCreatorIP)
}

// SetCreatorID sets the "creator_id" field.
func (m *ShorturlMutation) SetCreatorID(s string) {
	m.creator_id = &s
}

// CreatorID returns the value of the "creator_id" field in the mutation.
func (m *ShorturlMutation) CreatorID() (r string, exists bool) {
	v := m.creator_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatorID returns the old "creator_id" field's value of the Shorturl entity.
// If the Shorturl object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShorturlMutation) OldCreatorID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatorID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatorID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatorID: %w", err)
	}
	return oldValue.CreatorID, nil
}

// ClearCreatorID clears the value of the "creator_id" field.
func (m *ShorturlMutation) ClearCreatorID() {
	m.creator_id = nil
	m.clearedFields[shorturl.FieldCreatorID] = struct{}{}
}

// CreatorIDCleared returns if the "creator_id" field was cleared in this mutation.
func (m *ShorturlMutation) CreatorIDCleared() bool {
	_, ok := m.clearedFields[shorturl.FieldCreatorID]
	return ok
}

// ResetCreatorID resets all changes to the "creator_id" field.
func (m *ShorturlMutation) ResetCreatorID() {
	m.creator_id = nil
	delete(m.clearedFields, shorturl.FieldCreatorID)
}

// Where appends a list predicates to the ShorturlMutation builder.
func (m *ShorturlMutation) Where(ps ...predicate.Shorturl) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ShorturlMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ShorturlMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Shorturl, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ShorturlMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ShorturlMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Shorturl).
func (m *ShorturlMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ShorturlMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.create_time != nil {
		fields = append(fields, shorturl.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, shorturl.FieldUpdateTime)
	}
	if m.short_code != nil {
		fields = append(fields, shorturl.FieldShortCode)
	}
	if m.long_url != nil {
		fields = append(fields, shorturl.FieldLongURL)
	}
	if m.created_at != nil {
		fields = append(fields, shorturl.FieldCreatedAt)
	}
	if m.expire_at != nil {
		fields = append(fields, shorturl.FieldExpireAt)
	}
	if m.is_deleted != nil {
		fields = append(fields, shorturl.FieldIsDeleted)
	}
	if m.access_count != nil {
		fields = append(fields, shorturl.FieldAccessCount)
	}
	if m.creator_ip != nil {
		fields = append(fields, shorturl.FieldCreatorIP)
	}
	if m.creator_id != nil {
		fields = append(fields, shorturl.FieldCreatorID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ShorturlMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case shorturl.FieldCreateTime:
		return m.CreateTime()
	case shorturl.FieldUpdateTime:
		return m.UpdateTime()
	case shorturl.FieldShortCode:
		return m.ShortCode()
	case shorturl.FieldLongURL:
		return m.LongURL()
	case shorturl.FieldCreatedAt:
		return m.CreatedAt()
	case shorturl.FieldExpireAt:
		return m.ExpireAt()
	case shorturl.FieldIsDeleted:
		return m.IsDeleted()
	case shorturl.FieldAccessCount:
		return m.AccessCount()
	case shorturl.FieldCreatorIP:
		return m.CreatorIP()
	case shorturl.FieldCreatorID:
		return m.CreatorID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ShorturlMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case shorturl.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case shorturl.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case shorturl.FieldShortCode:
		return m.OldShortCode(ctx)
	case shorturl.FieldLongURL:
		return m.OldLongURL(ctx)
	case shorturl.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case shorturl.FieldExpireAt:
		return m.OldExpireAt(ctx)
	case shorturl.FieldIsDeleted:
		return m.OldIsDeleted(ctx)
	case shorturl.FieldAccessCount:
		return m.OldAccessCount(ctx)
	case shorturl.FieldCreatorIP:
		return m.OldCreatorIP(ctx)
	case shorturl.FieldCreatorID:
		return m.OldCreatorID(ctx)
	}
	return nil, fmt.Errorf("unknown Shorturl field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShorturlMutation) SetField(name string, value ent.Value) error {
	switch name {
	case shorturl.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case shorturl.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case shorturl.FieldShortCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShortCode(v)
		return nil
	case shorturl.FieldLongURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLongURL(v)
		return nil
	case shorturl.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case shorturl.FieldExpireAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpireAt(v)
		return nil
	case shorturl.FieldIsDeleted:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDeleted(v)
		return nil
	case shorturl.FieldAccessCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccessCount(v)
		return nil
	case shorturl.FieldCreatorIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatorIP(v)
		return nil
	case shorturl.FieldCreatorID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatorID(v)
		return nil
	}
	return fmt.Errorf("unknown Shorturl field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ShorturlMutation) AddedFields() []string {
	var fields []string
	if m.addaccess_count != nil {
		fields = append(fields, shorturl.FieldAccessCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ShorturlMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case shorturl.FieldAccessCount:
		return m.AddedAccessCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShorturlMutation) AddField(name string, value ent.Value) error {
	switch name {
	case shorturl.FieldAccessCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAccessCount(v)
		return nil
	}
	return fmt.Errorf("unknown Shorturl numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ShorturlMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(shorturl.FieldExpireAt) {
		fields = append(fields, shorturl.FieldExpireAt)
	}
	if m.FieldCleared(shorturl.FieldCreatorIP) {
		fields = append(fields, shorturl.FieldCreatorIP)
	}
	if m.FieldCleared(shorturl.FieldCreatorID) {
		fields = append(fields, shorturl.FieldCreatorID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ShorturlMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ShorturlMutation) ClearField(name string) error {
	switch name {
	case shorturl.FieldExpireAt:
		m.ClearExpireAt()
		return nil
	case shorturl.FieldCreatorIP:
		m.ClearCreatorIP()
		return nil
	case shorturl.FieldCreatorID:
		m.ClearCreatorID()
		return nil
	}
	return fmt.Errorf("unknown Shorturl nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ShorturlMutation) ResetField(name string) error {
	switch name {
	case shorturl.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case shorturl.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case shorturl.FieldShortCode:
		m.ResetShortCode()
		return nil
	case shorturl.FieldLongURL:
		m.ResetLongURL()
		return nil
	case shorturl.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case shorturl.FieldExpireAt:
		m.ResetExpireAt()
		return nil
	case shorturl.FieldIsDeleted:
		m.ResetIsDeleted()
		return nil
	case shorturl.FieldAccessCount:
		m.ResetAccessCount()
		return nil
	case shorturl.FieldCreatorIP:
		m.ResetCreatorIP()
		return nil
	case shorturl.FieldCreatorID:
		m.ResetCreatorID()
		return nil
	}
	return fmt.Errorf("unknown Shorturl field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ShorturlMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ShorturlMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ShorturlMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ShorturlMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ShorturlMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ShorturlMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ShorturlMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Shorturl unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ShorturlMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Shorturl edge %s", name)
}
