// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend-shorturl/internal/data/ent/shorturl"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Shorturl is the model entity for the Shorturl schema.
type Shorturl struct {
	config `json:"-"`
	// ID of the ent.
	// 自增主键
	ID int64 `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 短码(6-8位字符)
	ShortCode string `json:"short_code,omitempty"`
	// 原始URL
	LongURL string `json:"long_url,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 过期时间(null表示永久有效)
	ExpireAt *time.Time `json:"expire_at,omitempty"`
	// 软删除标记
	IsDeleted bool `json:"is_deleted,omitempty"`
	// 访问次数
	AccessCount int `json:"access_count,omitempty"`
	// 创建者IP
	CreatorIP string `json:"creator_ip,omitempty"`
	// 创建者用户ID
	CreatorID    string `json:"creator_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Shorturl) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case shorturl.FieldIsDeleted:
			values[i] = new(sql.NullBool)
		case shorturl.FieldID, shorturl.FieldAccessCount:
			values[i] = new(sql.NullInt64)
		case shorturl.FieldShortCode, shorturl.FieldLongURL, shorturl.FieldCreatorIP, shorturl.FieldCreatorID:
			values[i] = new(sql.NullString)
		case shorturl.FieldCreateTime, shorturl.FieldUpdateTime, shorturl.FieldCreatedAt, shorturl.FieldExpireAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Shorturl fields.
func (s *Shorturl) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case shorturl.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int64(value.Int64)
		case shorturl.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				s.CreateTime = value.Time
			}
		case shorturl.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				s.UpdateTime = value.Time
			}
		case shorturl.FieldShortCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field short_code", values[i])
			} else if value.Valid {
				s.ShortCode = value.String
			}
		case shorturl.FieldLongURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field long_url", values[i])
			} else if value.Valid {
				s.LongURL = value.String
			}
		case shorturl.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case shorturl.FieldExpireAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expire_at", values[i])
			} else if value.Valid {
				s.ExpireAt = new(time.Time)
				*s.ExpireAt = value.Time
			}
		case shorturl.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				s.IsDeleted = value.Bool
			}
		case shorturl.FieldAccessCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field access_count", values[i])
			} else if value.Valid {
				s.AccessCount = int(value.Int64)
			}
		case shorturl.FieldCreatorIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field creator_ip", values[i])
			} else if value.Valid {
				s.CreatorIP = value.String
			}
		case shorturl.FieldCreatorID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field creator_id", values[i])
			} else if value.Valid {
				s.CreatorID = value.String
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Shorturl.
// This includes values selected through modifiers, order, etc.
func (s *Shorturl) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// Update returns a builder for updating this Shorturl.
// Note that you need to call Shorturl.Unwrap() before calling this method if this Shorturl
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Shorturl) Update() *ShorturlUpdateOne {
	return NewShorturlClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Shorturl entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Shorturl) Unwrap() *Shorturl {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Shorturl is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Shorturl) String() string {
	var builder strings.Builder
	builder.WriteString("Shorturl(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("create_time=")
	builder.WriteString(s.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(s.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("short_code=")
	builder.WriteString(s.ShortCode)
	builder.WriteString(", ")
	builder.WriteString("long_url=")
	builder.WriteString(s.LongURL)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := s.ExpireAt; v != nil {
		builder.WriteString("expire_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", s.IsDeleted))
	builder.WriteString(", ")
	builder.WriteString("access_count=")
	builder.WriteString(fmt.Sprintf("%v", s.AccessCount))
	builder.WriteString(", ")
	builder.WriteString("creator_ip=")
	builder.WriteString(s.CreatorIP)
	builder.WriteString(", ")
	builder.WriteString("creator_id=")
	builder.WriteString(s.CreatorID)
	builder.WriteByte(')')
	return builder.String()
}

// Shorturls is a parsable slice of Shorturl.
type Shorturls []*Shorturl
