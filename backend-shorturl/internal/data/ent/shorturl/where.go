// Code generated by ent, DO NOT EDIT.

package shorturl

import (
	"backend-shorturl/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldEQ(FieldUpdateTime, v))
}

// ShortCode applies equality check predicate on the "short_code" field. It's identical to ShortCodeEQ.
func ShortCode(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldEQ(FieldShortCode, v))
}

// LongURL applies equality check predicate on the "long_url" field. It's identical to LongURLEQ.
func LongURL(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldEQ(FieldLongURL, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldEQ(FieldCreatedAt, v))
}

// ExpireAt applies equality check predicate on the "expire_at" field. It's identical to ExpireAtEQ.
func ExpireAt(v time.Time) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldEQ(FieldExpireAt, v))
}

// IsDeleted applies equality check predicate on the "is_deleted" field. It's identical to IsDeletedEQ.
func IsDeleted(v bool) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldEQ(FieldIsDeleted, v))
}

// AccessCount applies equality check predicate on the "access_count" field. It's identical to AccessCountEQ.
func AccessCount(v int) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldEQ(FieldAccessCount, v))
}

// CreatorIP applies equality check predicate on the "creator_ip" field. It's identical to CreatorIPEQ.
func CreatorIP(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldEQ(FieldCreatorIP, v))
}

// CreatorID applies equality check predicate on the "creator_id" field. It's identical to CreatorIDEQ.
func CreatorID(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldEQ(FieldCreatorID, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldLTE(FieldUpdateTime, v))
}

// ShortCodeEQ applies the EQ predicate on the "short_code" field.
func ShortCodeEQ(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldEQ(FieldShortCode, v))
}

// ShortCodeNEQ applies the NEQ predicate on the "short_code" field.
func ShortCodeNEQ(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldNEQ(FieldShortCode, v))
}

// ShortCodeIn applies the In predicate on the "short_code" field.
func ShortCodeIn(vs ...string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldIn(FieldShortCode, vs...))
}

// ShortCodeNotIn applies the NotIn predicate on the "short_code" field.
func ShortCodeNotIn(vs ...string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldNotIn(FieldShortCode, vs...))
}

// ShortCodeGT applies the GT predicate on the "short_code" field.
func ShortCodeGT(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldGT(FieldShortCode, v))
}

// ShortCodeGTE applies the GTE predicate on the "short_code" field.
func ShortCodeGTE(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldGTE(FieldShortCode, v))
}

// ShortCodeLT applies the LT predicate on the "short_code" field.
func ShortCodeLT(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldLT(FieldShortCode, v))
}

// ShortCodeLTE applies the LTE predicate on the "short_code" field.
func ShortCodeLTE(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldLTE(FieldShortCode, v))
}

// ShortCodeContains applies the Contains predicate on the "short_code" field.
func ShortCodeContains(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldContains(FieldShortCode, v))
}

// ShortCodeHasPrefix applies the HasPrefix predicate on the "short_code" field.
func ShortCodeHasPrefix(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldHasPrefix(FieldShortCode, v))
}

// ShortCodeHasSuffix applies the HasSuffix predicate on the "short_code" field.
func ShortCodeHasSuffix(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldHasSuffix(FieldShortCode, v))
}

// ShortCodeEqualFold applies the EqualFold predicate on the "short_code" field.
func ShortCodeEqualFold(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldEqualFold(FieldShortCode, v))
}

// ShortCodeContainsFold applies the ContainsFold predicate on the "short_code" field.
func ShortCodeContainsFold(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldContainsFold(FieldShortCode, v))
}

// LongURLEQ applies the EQ predicate on the "long_url" field.
func LongURLEQ(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldEQ(FieldLongURL, v))
}

// LongURLNEQ applies the NEQ predicate on the "long_url" field.
func LongURLNEQ(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldNEQ(FieldLongURL, v))
}

// LongURLIn applies the In predicate on the "long_url" field.
func LongURLIn(vs ...string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldIn(FieldLongURL, vs...))
}

// LongURLNotIn applies the NotIn predicate on the "long_url" field.
func LongURLNotIn(vs ...string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldNotIn(FieldLongURL, vs...))
}

// LongURLGT applies the GT predicate on the "long_url" field.
func LongURLGT(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldGT(FieldLongURL, v))
}

// LongURLGTE applies the GTE predicate on the "long_url" field.
func LongURLGTE(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldGTE(FieldLongURL, v))
}

// LongURLLT applies the LT predicate on the "long_url" field.
func LongURLLT(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldLT(FieldLongURL, v))
}

// LongURLLTE applies the LTE predicate on the "long_url" field.
func LongURLLTE(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldLTE(FieldLongURL, v))
}

// LongURLContains applies the Contains predicate on the "long_url" field.
func LongURLContains(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldContains(FieldLongURL, v))
}

// LongURLHasPrefix applies the HasPrefix predicate on the "long_url" field.
func LongURLHasPrefix(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldHasPrefix(FieldLongURL, v))
}

// LongURLHasSuffix applies the HasSuffix predicate on the "long_url" field.
func LongURLHasSuffix(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldHasSuffix(FieldLongURL, v))
}

// LongURLEqualFold applies the EqualFold predicate on the "long_url" field.
func LongURLEqualFold(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldEqualFold(FieldLongURL, v))
}

// LongURLContainsFold applies the ContainsFold predicate on the "long_url" field.
func LongURLContainsFold(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldContainsFold(FieldLongURL, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldLTE(FieldCreatedAt, v))
}

// ExpireAtEQ applies the EQ predicate on the "expire_at" field.
func ExpireAtEQ(v time.Time) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldEQ(FieldExpireAt, v))
}

// ExpireAtNEQ applies the NEQ predicate on the "expire_at" field.
func ExpireAtNEQ(v time.Time) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldNEQ(FieldExpireAt, v))
}

// ExpireAtIn applies the In predicate on the "expire_at" field.
func ExpireAtIn(vs ...time.Time) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldIn(FieldExpireAt, vs...))
}

// ExpireAtNotIn applies the NotIn predicate on the "expire_at" field.
func ExpireAtNotIn(vs ...time.Time) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldNotIn(FieldExpireAt, vs...))
}

// ExpireAtGT applies the GT predicate on the "expire_at" field.
func ExpireAtGT(v time.Time) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldGT(FieldExpireAt, v))
}

// ExpireAtGTE applies the GTE predicate on the "expire_at" field.
func ExpireAtGTE(v time.Time) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldGTE(FieldExpireAt, v))
}

// ExpireAtLT applies the LT predicate on the "expire_at" field.
func ExpireAtLT(v time.Time) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldLT(FieldExpireAt, v))
}

// ExpireAtLTE applies the LTE predicate on the "expire_at" field.
func ExpireAtLTE(v time.Time) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldLTE(FieldExpireAt, v))
}

// ExpireAtIsNil applies the IsNil predicate on the "expire_at" field.
func ExpireAtIsNil() predicate.Shorturl {
	return predicate.Shorturl(sql.FieldIsNull(FieldExpireAt))
}

// ExpireAtNotNil applies the NotNil predicate on the "expire_at" field.
func ExpireAtNotNil() predicate.Shorturl {
	return predicate.Shorturl(sql.FieldNotNull(FieldExpireAt))
}

// IsDeletedEQ applies the EQ predicate on the "is_deleted" field.
func IsDeletedEQ(v bool) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldEQ(FieldIsDeleted, v))
}

// IsDeletedNEQ applies the NEQ predicate on the "is_deleted" field.
func IsDeletedNEQ(v bool) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldNEQ(FieldIsDeleted, v))
}

// AccessCountEQ applies the EQ predicate on the "access_count" field.
func AccessCountEQ(v int) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldEQ(FieldAccessCount, v))
}

// AccessCountNEQ applies the NEQ predicate on the "access_count" field.
func AccessCountNEQ(v int) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldNEQ(FieldAccessCount, v))
}

// AccessCountIn applies the In predicate on the "access_count" field.
func AccessCountIn(vs ...int) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldIn(FieldAccessCount, vs...))
}

// AccessCountNotIn applies the NotIn predicate on the "access_count" field.
func AccessCountNotIn(vs ...int) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldNotIn(FieldAccessCount, vs...))
}

// AccessCountGT applies the GT predicate on the "access_count" field.
func AccessCountGT(v int) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldGT(FieldAccessCount, v))
}

// AccessCountGTE applies the GTE predicate on the "access_count" field.
func AccessCountGTE(v int) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldGTE(FieldAccessCount, v))
}

// AccessCountLT applies the LT predicate on the "access_count" field.
func AccessCountLT(v int) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldLT(FieldAccessCount, v))
}

// AccessCountLTE applies the LTE predicate on the "access_count" field.
func AccessCountLTE(v int) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldLTE(FieldAccessCount, v))
}

// CreatorIPEQ applies the EQ predicate on the "creator_ip" field.
func CreatorIPEQ(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldEQ(FieldCreatorIP, v))
}

// CreatorIPNEQ applies the NEQ predicate on the "creator_ip" field.
func CreatorIPNEQ(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldNEQ(FieldCreatorIP, v))
}

// CreatorIPIn applies the In predicate on the "creator_ip" field.
func CreatorIPIn(vs ...string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldIn(FieldCreatorIP, vs...))
}

// CreatorIPNotIn applies the NotIn predicate on the "creator_ip" field.
func CreatorIPNotIn(vs ...string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldNotIn(FieldCreatorIP, vs...))
}

// CreatorIPGT applies the GT predicate on the "creator_ip" field.
func CreatorIPGT(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldGT(FieldCreatorIP, v))
}

// CreatorIPGTE applies the GTE predicate on the "creator_ip" field.
func CreatorIPGTE(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldGTE(FieldCreatorIP, v))
}

// CreatorIPLT applies the LT predicate on the "creator_ip" field.
func CreatorIPLT(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldLT(FieldCreatorIP, v))
}

// CreatorIPLTE applies the LTE predicate on the "creator_ip" field.
func CreatorIPLTE(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldLTE(FieldCreatorIP, v))
}

// CreatorIPContains applies the Contains predicate on the "creator_ip" field.
func CreatorIPContains(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldContains(FieldCreatorIP, v))
}

// CreatorIPHasPrefix applies the HasPrefix predicate on the "creator_ip" field.
func CreatorIPHasPrefix(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldHasPrefix(FieldCreatorIP, v))
}

// CreatorIPHasSuffix applies the HasSuffix predicate on the "creator_ip" field.
func CreatorIPHasSuffix(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldHasSuffix(FieldCreatorIP, v))
}

// CreatorIPIsNil applies the IsNil predicate on the "creator_ip" field.
func CreatorIPIsNil() predicate.Shorturl {
	return predicate.Shorturl(sql.FieldIsNull(FieldCreatorIP))
}

// CreatorIPNotNil applies the NotNil predicate on the "creator_ip" field.
func CreatorIPNotNil() predicate.Shorturl {
	return predicate.Shorturl(sql.FieldNotNull(FieldCreatorIP))
}

// CreatorIPEqualFold applies the EqualFold predicate on the "creator_ip" field.
func CreatorIPEqualFold(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldEqualFold(FieldCreatorIP, v))
}

// CreatorIPContainsFold applies the ContainsFold predicate on the "creator_ip" field.
func CreatorIPContainsFold(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldContainsFold(FieldCreatorIP, v))
}

// CreatorIDEQ applies the EQ predicate on the "creator_id" field.
func CreatorIDEQ(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldEQ(FieldCreatorID, v))
}

// CreatorIDNEQ applies the NEQ predicate on the "creator_id" field.
func CreatorIDNEQ(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldNEQ(FieldCreatorID, v))
}

// CreatorIDIn applies the In predicate on the "creator_id" field.
func CreatorIDIn(vs ...string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldIn(FieldCreatorID, vs...))
}

// CreatorIDNotIn applies the NotIn predicate on the "creator_id" field.
func CreatorIDNotIn(vs ...string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldNotIn(FieldCreatorID, vs...))
}

// CreatorIDGT applies the GT predicate on the "creator_id" field.
func CreatorIDGT(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldGT(FieldCreatorID, v))
}

// CreatorIDGTE applies the GTE predicate on the "creator_id" field.
func CreatorIDGTE(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldGTE(FieldCreatorID, v))
}

// CreatorIDLT applies the LT predicate on the "creator_id" field.
func CreatorIDLT(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldLT(FieldCreatorID, v))
}

// CreatorIDLTE applies the LTE predicate on the "creator_id" field.
func CreatorIDLTE(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldLTE(FieldCreatorID, v))
}

// CreatorIDContains applies the Contains predicate on the "creator_id" field.
func CreatorIDContains(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldContains(FieldCreatorID, v))
}

// CreatorIDHasPrefix applies the HasPrefix predicate on the "creator_id" field.
func CreatorIDHasPrefix(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldHasPrefix(FieldCreatorID, v))
}

// CreatorIDHasSuffix applies the HasSuffix predicate on the "creator_id" field.
func CreatorIDHasSuffix(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldHasSuffix(FieldCreatorID, v))
}

// CreatorIDIsNil applies the IsNil predicate on the "creator_id" field.
func CreatorIDIsNil() predicate.Shorturl {
	return predicate.Shorturl(sql.FieldIsNull(FieldCreatorID))
}

// CreatorIDNotNil applies the NotNil predicate on the "creator_id" field.
func CreatorIDNotNil() predicate.Shorturl {
	return predicate.Shorturl(sql.FieldNotNull(FieldCreatorID))
}

// CreatorIDEqualFold applies the EqualFold predicate on the "creator_id" field.
func CreatorIDEqualFold(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldEqualFold(FieldCreatorID, v))
}

// CreatorIDContainsFold applies the ContainsFold predicate on the "creator_id" field.
func CreatorIDContainsFold(v string) predicate.Shorturl {
	return predicate.Shorturl(sql.FieldContainsFold(FieldCreatorID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Shorturl) predicate.Shorturl {
	return predicate.Shorturl(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Shorturl) predicate.Shorturl {
	return predicate.Shorturl(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Shorturl) predicate.Shorturl {
	return predicate.Shorturl(sql.NotPredicates(p))
}
