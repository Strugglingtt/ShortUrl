// Code generated by ent, DO NOT EDIT.

package shorturl

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the shorturl type in the database.
	Label = "shorturl"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldShortCode holds the string denoting the short_code field in the database.
	FieldShortCode = "short_code"
	// FieldLongURL holds the string denoting the long_url field in the database.
	FieldLongURL = "long_url"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldExpireAt holds the string denoting the expire_at field in the database.
	FieldExpireAt = "expire_at"
	// FieldIsDeleted holds the string denoting the is_deleted field in the database.
	FieldIsDeleted = "is_deleted"
	// FieldAccessCount holds the string denoting the access_count field in the database.
	FieldAccessCount = "access_count"
	// FieldCreatorIP holds the string denoting the creator_ip field in the database.
	FieldCreatorIP = "creator_ip"
	// FieldCreatorID holds the string denoting the creator_id field in the database.
	FieldCreatorID = "creator_id"
	// Table holds the table name of the shorturl in the database.
	Table = "shorturls"
)

// Columns holds all SQL columns for shorturl fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldShortCode,
	FieldLongURL,
	FieldCreatedAt,
	FieldExpireAt,
	FieldIsDeleted,
	FieldAccessCount,
	FieldCreatorIP,
	FieldCreatorID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// ShortCodeValidator is a validator for the "short_code" field. It is called by the builders before save.
	ShortCodeValidator func(string) error
	// LongURLValidator is a validator for the "long_url" field. It is called by the builders before save.
	LongURLValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultIsDeleted holds the default value on creation for the "is_deleted" field.
	DefaultIsDeleted bool
	// DefaultAccessCount holds the default value on creation for the "access_count" field.
	DefaultAccessCount int
	// CreatorIPValidator is a validator for the "creator_ip" field. It is called by the builders before save.
	CreatorIPValidator func(string) error
	// CreatorIDValidator is a validator for the "creator_id" field. It is called by the builders before save.
	CreatorIDValidator func(string) error
)

// OrderOption defines the ordering options for the Shorturl queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByShortCode orders the results by the short_code field.
func ByShortCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShortCode, opts...).ToFunc()
}

// ByLongURL orders the results by the long_url field.
func ByLongURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLongURL, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByExpireAt orders the results by the expire_at field.
func ByExpireAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpireAt, opts...).ToFunc()
}

// ByIsDeleted orders the results by the is_deleted field.
func ByIsDeleted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDeleted, opts...).ToFunc()
}

// ByAccessCount orders the results by the access_count field.
func ByAccessCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccessCount, opts...).ToFunc()
}

// ByCreatorIP orders the results by the creator_ip field.
func ByCreatorIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatorIP, opts...).ToFunc()
}

// ByCreatorID orders the results by the creator_id field.
func ByCreatorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatorID, opts...).ToFunc()
}
