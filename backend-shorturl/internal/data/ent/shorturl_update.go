// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend-shorturl/internal/data/ent/predicate"
	"backend-shorturl/internal/data/ent/shorturl"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShorturlUpdate is the builder for updating Shorturl entities.
type ShorturlUpdate struct {
	config
	hooks    []Hook
	mutation *ShorturlMutation
}

// Where appends a list predicates to the ShorturlUpdate builder.
func (su *ShorturlUpdate) Where(ps ...predicate.Shorturl) *ShorturlUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdateTime sets the "update_time" field.
func (su *ShorturlUpdate) SetUpdateTime(t time.Time) *ShorturlUpdate {
	su.mutation.SetUpdateTime(t)
	return su
}

// SetLongURL sets the "long_url" field.
func (su *ShorturlUpdate) SetLongURL(s string) *ShorturlUpdate {
	su.mutation.SetLongURL(s)
	return su
}

// SetNillableLongURL sets the "long_url" field if the given value is not nil.
func (su *ShorturlUpdate) SetNillableLongURL(s *string) *ShorturlUpdate {
	if s != nil {
		su.SetLongURL(*s)
	}
	return su
}

// SetExpireAt sets the "expire_at" field.
func (su *ShorturlUpdate) SetExpireAt(t time.Time) *ShorturlUpdate {
	su.mutation.SetExpireAt(t)
	return su
}

// SetNillableExpireAt sets the "expire_at" field if the given value is not nil.
func (su *ShorturlUpdate) SetNillableExpireAt(t *time.Time) *ShorturlUpdate {
	if t != nil {
		su.SetExpireAt(*t)
	}
	return su
}

// ClearExpireAt clears the value of the "expire_at" field.
func (su *ShorturlUpdate) ClearExpireAt() *ShorturlUpdate {
	su.mutation.ClearExpireAt()
	return su
}

// SetIsDeleted sets the "is_deleted" field.
func (su *ShorturlUpdate) SetIsDeleted(b bool) *ShorturlUpdate {
	su.mutation.SetIsDeleted(b)
	return su
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (su *ShorturlUpdate) SetNillableIsDeleted(b *bool) *ShorturlUpdate {
	if b != nil {
		su.SetIsDeleted(*b)
	}
	return su
}

// SetAccessCount sets the "access_count" field.
func (su *ShorturlUpdate) SetAccessCount(i int) *ShorturlUpdate {
	su.mutation.ResetAccessCount()
	su.mutation.SetAccessCount(i)
	return su
}

// SetNillableAccessCount sets the "access_count" field if the given value is not nil.
func (su *ShorturlUpdate) SetNillableAccessCount(i *int) *ShorturlUpdate {
	if i != nil {
		su.SetAccessCount(*i)
	}
	return su
}

// AddAccessCount adds i to the "access_count" field.
func (su *ShorturlUpdate) AddAccessCount(i int) *ShorturlUpdate {
	su.mutation.AddAccessCount(i)
	return su
}

// SetCreatorIP sets the "creator_ip" field.
func (su *ShorturlUpdate) SetCreatorIP(s string) *ShorturlUpdate {
	su.mutation.SetCreatorIP(s)
	return su
}

// SetNillableCreatorIP sets the "creator_ip" field if the given value is not nil.
func (su *ShorturlUpdate) SetNillableCreatorIP(s *string) *ShorturlUpdate {
	if s != nil {
		su.SetCreatorIP(*s)
	}
	return su
}

// ClearCreatorIP clears the value of the "creator_ip" field.
func (su *ShorturlUpdate) ClearCreatorIP() *ShorturlUpdate {
	su.mutation.ClearCreatorIP()
	return su
}

// SetCreatorID sets the "creator_id" field.
func (su *ShorturlUpdate) SetCreatorID(s string) *ShorturlUpdate {
	su.mutation.SetCreatorID(s)
	return su
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (su *ShorturlUpdate) SetNillableCreatorID(s *string) *ShorturlUpdate {
	if s != nil {
		su.SetCreatorID(*s)
	}
	return su
}

// ClearCreatorID clears the value of the "creator_id" field.
func (su *ShorturlUpdate) ClearCreatorID() *ShorturlUpdate {
	su.mutation.ClearCreatorID()
	return su
}

// Mutation returns the ShorturlMutation object of the builder.
func (su *ShorturlUpdate) Mutation() *ShorturlMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ShorturlUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ShorturlUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ShorturlUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ShorturlUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *ShorturlUpdate) defaults() {
	if _, ok := su.mutation.UpdateTime(); !ok {
		v := shorturl.UpdateDefaultUpdateTime()
		su.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *ShorturlUpdate) check() error {
	if v, ok := su.mutation.LongURL(); ok {
		if err := shorturl.LongURLValidator(v); err != nil {
			return &ValidationError{Name: "long_url", err: fmt.Errorf(`ent: validator failed for field "Shorturl.long_url": %w`, err)}
		}
	}
	if v, ok := su.mutation.CreatorIP(); ok {
		if err := shorturl.CreatorIPValidator(v); err != nil {
			return &ValidationError{Name: "creator_ip", err: fmt.Errorf(`ent: validator failed for field "Shorturl.creator_ip": %w`, err)}
		}
	}
	if v, ok := su.mutation.CreatorID(); ok {
		if err := shorturl.CreatorIDValidator(v); err != nil {
			return &ValidationError{Name: "creator_id", err: fmt.Errorf(`ent: validator failed for field "Shorturl.creator_id": %w`, err)}
		}
	}
	return nil
}

func (su *ShorturlUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(shorturl.Table, shorturl.Columns, sqlgraph.NewFieldSpec(shorturl.FieldID, field.TypeInt64))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdateTime(); ok {
		_spec.SetField(shorturl.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := su.mutation.LongURL(); ok {
		_spec.SetField(shorturl.FieldLongURL, field.TypeString, value)
	}
	if value, ok := su.mutation.ExpireAt(); ok {
		_spec.SetField(shorturl.FieldExpireAt, field.TypeTime, value)
	}
	if su.mutation.ExpireAtCleared() {
		_spec.ClearField(shorturl.FieldExpireAt, field.TypeTime)
	}
	if value, ok := su.mutation.IsDeleted(); ok {
		_spec.SetField(shorturl.FieldIsDeleted, field.TypeBool, value)
	}
	if value, ok := su.mutation.AccessCount(); ok {
		_spec.SetField(shorturl.FieldAccessCount, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedAccessCount(); ok {
		_spec.AddField(shorturl.FieldAccessCount, field.TypeInt, value)
	}
	if value, ok := su.mutation.CreatorIP(); ok {
		_spec.SetField(shorturl.FieldCreatorIP, field.TypeString, value)
	}
	if su.mutation.CreatorIPCleared() {
		_spec.ClearField(shorturl.FieldCreatorIP, field.TypeString)
	}
	if value, ok := su.mutation.CreatorID(); ok {
		_spec.SetField(shorturl.FieldCreatorID, field.TypeString, value)
	}
	if su.mutation.CreatorIDCleared() {
		_spec.ClearField(shorturl.FieldCreatorID, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shorturl.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ShorturlUpdateOne is the builder for updating a single Shorturl entity.
type ShorturlUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShorturlMutation
}

// SetUpdateTime sets the "update_time" field.
func (suo *ShorturlUpdateOne) SetUpdateTime(t time.Time) *ShorturlUpdateOne {
	suo.mutation.SetUpdateTime(t)
	return suo
}

// SetLongURL sets the "long_url" field.
func (suo *ShorturlUpdateOne) SetLongURL(s string) *ShorturlUpdateOne {
	suo.mutation.SetLongURL(s)
	return suo
}

// SetNillableLongURL sets the "long_url" field if the given value is not nil.
func (suo *ShorturlUpdateOne) SetNillableLongURL(s *string) *ShorturlUpdateOne {
	if s != nil {
		suo.SetLongURL(*s)
	}
	return suo
}

// SetExpireAt sets the "expire_at" field.
func (suo *ShorturlUpdateOne) SetExpireAt(t time.Time) *ShorturlUpdateOne {
	suo.mutation.SetExpireAt(t)
	return suo
}

// SetNillableExpireAt sets the "expire_at" field if the given value is not nil.
func (suo *ShorturlUpdateOne) SetNillableExpireAt(t *time.Time) *ShorturlUpdateOne {
	if t != nil {
		suo.SetExpireAt(*t)
	}
	return suo
}

// ClearExpireAt clears the value of the "expire_at" field.
func (suo *ShorturlUpdateOne) ClearExpireAt() *ShorturlUpdateOne {
	suo.mutation.ClearExpireAt()
	return suo
}

// SetIsDeleted sets the "is_deleted" field.
func (suo *ShorturlUpdateOne) SetIsDeleted(b bool) *ShorturlUpdateOne {
	suo.mutation.SetIsDeleted(b)
	return suo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (suo *ShorturlUpdateOne) SetNillableIsDeleted(b *bool) *ShorturlUpdateOne {
	if b != nil {
		suo.SetIsDeleted(*b)
	}
	return suo
}

// SetAccessCount sets the "access_count" field.
func (suo *ShorturlUpdateOne) SetAccessCount(i int) *ShorturlUpdateOne {
	suo.mutation.ResetAccessCount()
	suo.mutation.SetAccessCount(i)
	return suo
}

// SetNillableAccessCount sets the "access_count" field if the given value is not nil.
func (suo *ShorturlUpdateOne) SetNillableAccessCount(i *int) *ShorturlUpdateOne {
	if i != nil {
		suo.SetAccessCount(*i)
	}
	return suo
}

// AddAccessCount adds i to the "access_count" field.
func (suo *ShorturlUpdateOne) AddAccessCount(i int) *ShorturlUpdateOne {
	suo.mutation.AddAccessCount(i)
	return suo
}

// SetCreatorIP sets the "creator_ip" field.
func (suo *ShorturlUpdateOne) SetCreatorIP(s string) *ShorturlUpdateOne {
	suo.mutation.SetCreatorIP(s)
	return suo
}

// SetNillableCreatorIP sets the "creator_ip" field if the given value is not nil.
func (suo *ShorturlUpdateOne) SetNillableCreatorIP(s *string) *ShorturlUpdateOne {
	if s != nil {
		suo.SetCreatorIP(*s)
	}
	return suo
}

// ClearCreatorIP clears the value of the "creator_ip" field.
func (suo *ShorturlUpdateOne) ClearCreatorIP() *ShorturlUpdateOne {
	suo.mutation.ClearCreatorIP()
	return suo
}

// SetCreatorID sets the "creator_id" field.
func (suo *ShorturlUpdateOne) SetCreatorID(s string) *ShorturlUpdateOne {
	suo.mutation.SetCreatorID(s)
	return suo
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (suo *ShorturlUpdateOne) SetNillableCreatorID(s *string) *ShorturlUpdateOne {
	if s != nil {
		suo.SetCreatorID(*s)
	}
	return suo
}

// ClearCreatorID clears the value of the "creator_id" field.
func (suo *ShorturlUpdateOne) ClearCreatorID() *ShorturlUpdateOne {
	suo.mutation.ClearCreatorID()
	return suo
}

// Mutation returns the ShorturlMutation object of the builder.
func (suo *ShorturlUpdateOne) Mutation() *ShorturlMutation {
	return suo.mutation
}

// Where appends a list predicates to the ShorturlUpdate builder.
func (suo *ShorturlUpdateOne) Where(ps ...predicate.Shorturl) *ShorturlUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ShorturlUpdateOne) Select(field string, fields ...string) *ShorturlUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Shorturl entity.
func (suo *ShorturlUpdateOne) Save(ctx context.Context) (*Shorturl, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ShorturlUpdateOne) SaveX(ctx context.Context) *Shorturl {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ShorturlUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ShorturlUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *ShorturlUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdateTime(); !ok {
		v := shorturl.UpdateDefaultUpdateTime()
		suo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *ShorturlUpdateOne) check() error {
	if v, ok := suo.mutation.LongURL(); ok {
		if err := shorturl.LongURLValidator(v); err != nil {
			return &ValidationError{Name: "long_url", err: fmt.Errorf(`ent: validator failed for field "Shorturl.long_url": %w`, err)}
		}
	}
	if v, ok := suo.mutation.CreatorIP(); ok {
		if err := shorturl.CreatorIPValidator(v); err != nil {
			return &ValidationError{Name: "creator_ip", err: fmt.Errorf(`ent: validator failed for field "Shorturl.creator_ip": %w`, err)}
		}
	}
	if v, ok := suo.mutation.CreatorID(); ok {
		if err := shorturl.CreatorIDValidator(v); err != nil {
			return &ValidationError{Name: "creator_id", err: fmt.Errorf(`ent: validator failed for field "Shorturl.creator_id": %w`, err)}
		}
	}
	return nil
}

func (suo *ShorturlUpdateOne) sqlSave(ctx context.Context) (_node *Shorturl, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(shorturl.Table, shorturl.Columns, sqlgraph.NewFieldSpec(shorturl.FieldID, field.TypeInt64))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Shorturl.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shorturl.FieldID)
		for _, f := range fields {
			if !shorturl.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shorturl.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdateTime(); ok {
		_spec.SetField(shorturl.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := suo.mutation.LongURL(); ok {
		_spec.SetField(shorturl.FieldLongURL, field.TypeString, value)
	}
	if value, ok := suo.mutation.ExpireAt(); ok {
		_spec.SetField(shorturl.FieldExpireAt, field.TypeTime, value)
	}
	if suo.mutation.ExpireAtCleared() {
		_spec.ClearField(shorturl.FieldExpireAt, field.TypeTime)
	}
	if value, ok := suo.mutation.IsDeleted(); ok {
		_spec.SetField(shorturl.FieldIsDeleted, field.TypeBool, value)
	}
	if value, ok := suo.mutation.AccessCount(); ok {
		_spec.SetField(shorturl.FieldAccessCount, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedAccessCount(); ok {
		_spec.AddField(shorturl.FieldAccessCount, field.TypeInt, value)
	}
	if value, ok := suo.mutation.CreatorIP(); ok {
		_spec.SetField(shorturl.FieldCreatorIP, field.TypeString, value)
	}
	if suo.mutation.CreatorIPCleared() {
		_spec.ClearField(shorturl.FieldCreatorIP, field.TypeString)
	}
	if value, ok := suo.mutation.CreatorID(); ok {
		_spec.SetField(shorturl.FieldCreatorID, field.TypeString, value)
	}
	if suo.mutation.CreatorIDCleared() {
		_spec.ClearField(shorturl.FieldCreatorID, field.TypeString)
	}
	_node = &Shorturl{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shorturl.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
