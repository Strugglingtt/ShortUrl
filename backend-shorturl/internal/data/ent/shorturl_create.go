// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend-shorturl/internal/data/ent/shorturl"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShorturlCreate is the builder for creating a Shorturl entity.
type ShorturlCreate struct {
	config
	mutation *ShorturlMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (sc *ShorturlCreate) SetCreateTime(t time.Time) *ShorturlCreate {
	sc.mutation.SetCreateTime(t)
	return sc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (sc *ShorturlCreate) SetNillableCreateTime(t *time.Time) *ShorturlCreate {
	if t != nil {
		sc.SetCreateTime(*t)
	}
	return sc
}

// SetUpdateTime sets the "update_time" field.
func (sc *ShorturlCreate) SetUpdateTime(t time.Time) *ShorturlCreate {
	sc.mutation.SetUpdateTime(t)
	return sc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (sc *ShorturlCreate) SetNillableUpdateTime(t *time.Time) *ShorturlCreate {
	if t != nil {
		sc.SetUpdateTime(*t)
	}
	return sc
}

// SetShortCode sets the "short_code" field.
func (sc *ShorturlCreate) SetShortCode(s string) *ShorturlCreate {
	sc.mutation.SetShortCode(s)
	return sc
}

// SetLongURL sets the "long_url" field.
func (sc *ShorturlCreate) SetLongURL(s string) *ShorturlCreate {
	sc.mutation.SetLongURL(s)
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *ShorturlCreate) SetCreatedAt(t time.Time) *ShorturlCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *ShorturlCreate) SetNillableCreatedAt(t *time.Time) *ShorturlCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetExpireAt sets the "expire_at" field.
func (sc *ShorturlCreate) SetExpireAt(t time.Time) *ShorturlCreate {
	sc.mutation.SetExpireAt(t)
	return sc
}

// SetNillableExpireAt sets the "expire_at" field if the given value is not nil.
func (sc *ShorturlCreate) SetNillableExpireAt(t *time.Time) *ShorturlCreate {
	if t != nil {
		sc.SetExpireAt(*t)
	}
	return sc
}

// SetIsDeleted sets the "is_deleted" field.
func (sc *ShorturlCreate) SetIsDeleted(b bool) *ShorturlCreate {
	sc.mutation.SetIsDeleted(b)
	return sc
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (sc *ShorturlCreate) SetNillableIsDeleted(b *bool) *ShorturlCreate {
	if b != nil {
		sc.SetIsDeleted(*b)
	}
	return sc
}

// SetAccessCount sets the "access_count" field.
func (sc *ShorturlCreate) SetAccessCount(i int) *ShorturlCreate {
	sc.mutation.SetAccessCount(i)
	return sc
}

// SetNillableAccessCount sets the "access_count" field if the given value is not nil.
func (sc *ShorturlCreate) SetNillableAccessCount(i *int) *ShorturlCreate {
	if i != nil {
		sc.SetAccessCount(*i)
	}
	return sc
}

// SetCreatorIP sets the "creator_ip" field.
func (sc *ShorturlCreate) SetCreatorIP(s string) *ShorturlCreate {
	sc.mutation.SetCreatorIP(s)
	return sc
}

// SetNillableCreatorIP sets the "creator_ip" field if the given value is not nil.
func (sc *ShorturlCreate) SetNillableCreatorIP(s *string) *ShorturlCreate {
	if s != nil {
		sc.SetCreatorIP(*s)
	}
	return sc
}

// SetCreatorID sets the "creator_id" field.
func (sc *ShorturlCreate) SetCreatorID(s string) *ShorturlCreate {
	sc.mutation.SetCreatorID(s)
	return sc
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (sc *ShorturlCreate) SetNillableCreatorID(s *string) *ShorturlCreate {
	if s != nil {
		sc.SetCreatorID(*s)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *ShorturlCreate) SetID(i int64) *ShorturlCreate {
	sc.mutation.SetID(i)
	return sc
}

// Mutation returns the ShorturlMutation object of the builder.
func (sc *ShorturlCreate) Mutation() *ShorturlMutation {
	return sc.mutation
}

// Save creates the Shorturl in the database.
func (sc *ShorturlCreate) Save(ctx context.Context) (*Shorturl, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ShorturlCreate) SaveX(ctx context.Context) *Shorturl {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *ShorturlCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *ShorturlCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *ShorturlCreate) defaults() {
	if _, ok := sc.mutation.CreateTime(); !ok {
		v := shorturl.DefaultCreateTime()
		sc.mutation.SetCreateTime(v)
	}
	if _, ok := sc.mutation.UpdateTime(); !ok {
		v := shorturl.DefaultUpdateTime()
		sc.mutation.SetUpdateTime(v)
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := shorturl.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.IsDeleted(); !ok {
		v := shorturl.DefaultIsDeleted
		sc.mutation.SetIsDeleted(v)
	}
	if _, ok := sc.mutation.AccessCount(); !ok {
		v := shorturl.DefaultAccessCount
		sc.mutation.SetAccessCount(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *ShorturlCreate) check() error {
	if _, ok := sc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Shorturl.create_time"`)}
	}
	if _, ok := sc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Shorturl.update_time"`)}
	}
	if _, ok := sc.mutation.ShortCode(); !ok {
		return &ValidationError{Name: "short_code", err: errors.New(`ent: missing required field "Shorturl.short_code"`)}
	}
	if v, ok := sc.mutation.ShortCode(); ok {
		if err := shorturl.ShortCodeValidator(v); err != nil {
			return &ValidationError{Name: "short_code", err: fmt.Errorf(`ent: validator failed for field "Shorturl.short_code": %w`, err)}
		}
	}
	if _, ok := sc.mutation.LongURL(); !ok {
		return &ValidationError{Name: "long_url", err: errors.New(`ent: missing required field "Shorturl.long_url"`)}
	}
	if v, ok := sc.mutation.LongURL(); ok {
		if err := shorturl.LongURLValidator(v); err != nil {
			return &ValidationError{Name: "long_url", err: fmt.Errorf(`ent: validator failed for field "Shorturl.long_url": %w`, err)}
		}
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Shorturl.created_at"`)}
	}
	if _, ok := sc.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "is_deleted", err: errors.New(`ent: missing required field "Shorturl.is_deleted"`)}
	}
	if _, ok := sc.mutation.AccessCount(); !ok {
		return &ValidationError{Name: "access_count", err: errors.New(`ent: missing required field "Shorturl.access_count"`)}
	}
	if v, ok := sc.mutation.CreatorIP(); ok {
		if err := shorturl.CreatorIPValidator(v); err != nil {
			return &ValidationError{Name: "creator_ip", err: fmt.Errorf(`ent: validator failed for field "Shorturl.creator_ip": %w`, err)}
		}
	}
	if v, ok := sc.mutation.CreatorID(); ok {
		if err := shorturl.CreatorIDValidator(v); err != nil {
			return &ValidationError{Name: "creator_id", err: fmt.Errorf(`ent: validator failed for field "Shorturl.creator_id": %w`, err)}
		}
	}
	return nil
}

func (sc *ShorturlCreate) sqlSave(ctx context.Context) (*Shorturl, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *ShorturlCreate) createSpec() (*Shorturl, *sqlgraph.CreateSpec) {
	var (
		_node = &Shorturl{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(shorturl.Table, sqlgraph.NewFieldSpec(shorturl.FieldID, field.TypeInt64))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.CreateTime(); ok {
		_spec.SetField(shorturl.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := sc.mutation.UpdateTime(); ok {
		_spec.SetField(shorturl.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := sc.mutation.ShortCode(); ok {
		_spec.SetField(shorturl.FieldShortCode, field.TypeString, value)
		_node.ShortCode = value
	}
	if value, ok := sc.mutation.LongURL(); ok {
		_spec.SetField(shorturl.FieldLongURL, field.TypeString, value)
		_node.LongURL = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(shorturl.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.ExpireAt(); ok {
		_spec.SetField(shorturl.FieldExpireAt, field.TypeTime, value)
		_node.ExpireAt = &value
	}
	if value, ok := sc.mutation.IsDeleted(); ok {
		_spec.SetField(shorturl.FieldIsDeleted, field.TypeBool, value)
		_node.IsDeleted = value
	}
	if value, ok := sc.mutation.AccessCount(); ok {
		_spec.SetField(shorturl.FieldAccessCount, field.TypeInt, value)
		_node.AccessCount = value
	}
	if value, ok := sc.mutation.CreatorIP(); ok {
		_spec.SetField(shorturl.FieldCreatorIP, field.TypeString, value)
		_node.CreatorIP = value
	}
	if value, ok := sc.mutation.CreatorID(); ok {
		_spec.SetField(shorturl.FieldCreatorID, field.TypeString, value)
		_node.CreatorID = value
	}
	return _node, _spec
}

// ShorturlCreateBulk is the builder for creating many Shorturl entities in bulk.
type ShorturlCreateBulk struct {
	config
	err      error
	builders []*ShorturlCreate
}

// Save creates the Shorturl entities in the database.
func (scb *ShorturlCreateBulk) Save(ctx context.Context) ([]*Shorturl, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Shorturl, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ShorturlMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *ShorturlCreateBulk) SaveX(ctx context.Context) []*Shorturl {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *ShorturlCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *ShorturlCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
